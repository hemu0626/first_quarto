---
title: "One Layer Neural Network"
---

### Build Neural Network to predict

#### Demo

```{python}
from sklearn.neural_network import MLPClassifier
X = [[0., 0.], [1., 1.]]
y = [0, 1]
clf = MLPClassifier(solver='lbfgs', alpha=1e-5,
                    hidden_layer_sizes=(5, 2), random_state=1)
clf.fit(X, y)
```

```{python}
clf.predict([[2., 2.], [-1., -2.]])
[coef.shape for coef in clf.coefs_]

clf.predict_proba([[2., 2.], [1., 2.]])
```

```{python}
X = [[0., 0.], [1., 1.]]
y = [[0, 1], [1, 1]]
clf = MLPClassifier(solver='lbfgs', alpha=1e-5,
                    hidden_layer_sizes=(15,), random_state=1)
clf.fit(X, y)
clf.predict([[1., 2.]])
clf.predict([[0., 0.]])

```

#### Visualization of MLP weights on MNIST
